// #include<iostream>
// #include<vector>
// #include<string>
// class Solution {
// #define x first
// #define y second
// public:
//     int longestConsecutive(vector<int>& nums) {
//         map<int, int> mvp;
//         for (int i = 0; i < nums.size(); i ++ ) mvp[nums[i]] = i;
//         int ans = 0, used = 1e9 + 10, res = 1;
//         for (auto it = mvp.begin(); it != mvp.end(); it ++ ) {
//             if (it->x == used + 1) 
//                 res ++;
//             else
//                 res = 1;
//             used = it->x;
//             ans = max(ans, res);
//         }
//         return ans;
//     }
// };

// class Solution {
// public:
//     vector<vector<string>> groupAnagrams(vector<string>& strs) {
//         unordered_map<string,vector<string>> hash;
//         for(string& a:strs){
//             string key=a;
//             sort(key.begin(),key.end());
//             hash[key].emplace_back(a);
//         }
//         vector<vector<string>> result;
//         for(auto& a:hash){
//             result.emplace_back(a.second);
//         }
//         return result;
//     }
// };

// class Solution {
// public:
//     void moveZeroes(vector<int>& nums) {
//         int n=nums.size();
//         int left=0,right=0;
//         while(right<n){
//             if (nums[right]) {
//                 swap(nums[left], nums[right]);
//                 left++;
//             }
//             right++;
//         }
//     }
// };
// class Solution {
// public:
//     int maxArea(vector<int>& height) {
//         int high=0,s=0,result=0,lindex=0;
//         int rindex=height.size()-1;
//         while(lindex!=rindex){
//             high=min(height[lindex],height[rindex]);
//             s=(rindex-lindex)*high;
//             result=max(s,result);
//             if(height[lindex]<height[rindex]){
//                 lindex++;
//             }else {
//                 rindex--;
//             }
//         }
//         return result;
//     }
// };
// class Solution {
// public:
//     vector<vector<int>> threeSum(vector<int>& nums) {
//         sort(nums.begin(), nums.end());
//         vector<vector<int>> result;

//         for (int i = 0; i < nums.size(); i++) {
//             // 跳过重复的元素，避免重复解
//             if (i > 0 && nums[i] == nums[i - 1]) continue;

//             int lindex = i + 1;
//             int rindex = nums.size() - 1;

//             while (lindex < rindex) {
//                 int sum = nums[i] + nums[lindex] + nums[rindex];
                
//                 if (sum == 0) {
//                     // 找到满足条件的三元组
//                     result.emplace_back(vector<int>{nums[i], nums[lindex], nums[rindex]});
                    
//                     // 跳过重复的元素
//                     while (lindex < rindex && nums[lindex] == nums[lindex + 1]) lindex++;
//                     while (lindex < rindex && nums[rindex] == nums[rindex - 1]) rindex--;

//                     lindex++;
//                     rindex--;
//                 } else if (sum < 0) {
//                     lindex++;
//                 } else {
//                     rindex--;
//                 }
//             }
//         }

//         return result;
//     }
// };
