class Solution {
#define x first
#define y second
public:
    int longestConsecutive(vector<int>& nums) {
        map<int, int> mvp;
        for (int i = 0; i < nums.size(); i ++ ) mvp[nums[i]] = i;
        int ans = 0, used = 1e9 + 10, res = 1;
        for (auto it = mvp.begin(); it != mvp.end(); it ++ ) {
            if (it->x == used + 1) 
                res ++;
            else
                res = 1;
            used = it->x;
            ans = max(ans, res);
        }
        return ans;
    }
};

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,vector<string>> hash;
        for(string& a:strs){
            string key=a;
            sort(key.begin(),key.end());
            hash[key].emplace_back(a);
        }
        vector<vector<string>> result;
        for(auto& a:hash){
            result.emplace_back(a.second);
        }
        return result;
    }
};

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n=nums.size();
        int left=0,right=0;
        while(right<n){
            if (nums[right]) {
                swap(nums[left], nums[right]);
                left++;
            }
            right++;
        }
    }
};